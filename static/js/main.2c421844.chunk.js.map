{"version":3,"sources":["580b57fbd9996e24bc43c091.png","App.tsx","serviceWorker.ts","index.tsx","580b57fbd9996e24bc43c090.png"],"names":["module","exports","__webpack_require__","p","App","headerJumbotronStyle","backgroundColor","paddingTop","margin","jumbotronStyle","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","defaultCenter","lat","lng","position","className","Navbar","fixed","bg","variant","expand","Container","Brand","href","Button","Toggle","aria-controls","Collapse","Nav","Link","size","Jumbotron","style","fluid","Card","border","text","width","height","src","frameBorder","allowFullScreen","CardDeck","Img","twoBeers","oneBeer","padding","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c421844.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/580b57fbd9996e24bc43c091.36b5651f.png\";","import React, { Component } from 'react';\nimport { Button, Card, Jumbotron, Container, CardDeck, Navbar, Nav, Form, FormControl, NavDropdown } from 'react-bootstrap';\nimport './App.css';\nimport twoBeers from './580b57fbd9996e24bc43c090.png'\nimport oneBeer from './580b57fbd9996e24bc43c091.png'\nimport { GoogleMap, Marker, withGoogleMap, withScriptjs } from \"react-google-maps\"\n\nclass App extends Component {\n  render() {\n    const headerJumbotronStyle = {\n      backgroundColor: \"#f2f2f2\",\n      paddingTop: \"100px\",\n      margin: \"0px\"\n    };\n\n    const jumbotronStyle = {\n      backgroundColor: \"#f2f2f2\",\n      paddingTop: \"0px\",\n      margin: \"0px\"\n    };\n\n    const footerJumbotronStyle2 = {\n      backgroundColor: \"#e6e6e6\",\n      padding: \"10px\",\n      margin: \"0px\"\n    };\n\n    const GoogleMapComponent = withScriptjs(withGoogleMap((props) => <GoogleMap\n      defaultZoom={8}\n      defaultCenter={{ lat: -34.397, lng: 150.644 }}  >\n      <Marker position={{ lat: -34.397, lng: 150.644 }} />\n    </GoogleMap>));\n\n    return (\n      <div className=\"App\">\n\n        <Navbar fixed='top' bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Container>\n            <Navbar.Brand href=\"#home\"><Button variant=\"danger\">Johnny Promil</Button></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse>\n              <Nav className=\"mr-auto justify-content-end\">\n                <Nav.Link href=\"#home\"><Button size=\"sm\" variant=\"warning\">Główna</Button></Nav.Link>\n                <Nav.Link href=\"#link\"><Button size=\"sm\" variant=\"warning\">Oferta</Button></Nav.Link>\n                <Nav.Link href=\"#kontakt\"><Button size=\"sm\" variant=\"warning\">Kontakt</Button></Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Container>\n        </Navbar>\n\n        <Jumbotron style={headerJumbotronStyle} fluid>\n          <Container>\n            <Card bg=\"info\" border=\"warning\" text=\"white\" className=\"text-center p-4\">\n\n            </Card>\n          </Container>\n        </Jumbotron>\n\n        <Jumbotron style={headerJumbotronStyle} fluid>\n          <Container>\n            <iframe width=\"100%\" height=\"400px\" src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d626.1522285232337!2d17.05488071135112!3d51.11567543726553!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x470fe9d3d97cf061%3A0xc08116d71816dd97!2sG%C3%B3rnickiego+6%2C+50-337+Wroc%C5%82aw!5e0!3m2!1spl!2spl!4v1551622751662\" frameBorder=\"0\" style={{ border: \"2\" }} allowFullScreen></iframe>\n          </Container>\n        </Jumbotron>\n\n        <Jumbotron style={jumbotronStyle} fluid>\n          <Container>\n            <CardDeck>\n              <Card bg=\"info\" text=\"white\" className=\"text-center p-4\">\n                <Card.Img src={twoBeers}></Card.Img>\n                Text\n            </Card>\n              <Card bg=\"info\" text=\"white\" className=\"text-center p-4\">\n                <Card.Img src={oneBeer} variant=\"bottom\" style={{ width: '5rem' }}></Card.Img>\n              </Card>\n              <Card bg=\"info\" text=\"white\" className=\"text-center p-4\">\n                Text\n            </Card>\n            </CardDeck>\n          </Container>\n        </Jumbotron>\n\n        <Jumbotron style={jumbotronStyle} fluid>\n          <Container>\n            <CardDeck>\n              <Card bg=\"info\" text=\"white\" className=\"text-center p-4\">\n                <Card.Img src={twoBeers}></Card.Img>\n                Text\n            </Card>\n              <Card bg=\"info\" text=\"white\" className=\"text-center p-1\">\n                <Card.Img src={oneBeer} style={{ width: '5rem' }}></Card.Img>\n                Text\n            </Card>\n              <Card bg=\"info\" text=\"white\" className=\"text-center p-4\">\n                Text\n            </Card>\n            </CardDeck>\n          </Container>\n        </Jumbotron>\n\n        <Jumbotron style={footerJumbotronStyle2} fluid>\n          <Container>\n            Footer\n          </Container>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\n//<a href=\"https://www.freepik.com/free-photos-vectors/icon\">Icon vector created by winkimages - www.freepik.com</a>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/580b57fbd9996e24bc43c090.136fe05c.png\";"],"sourceRoot":""}