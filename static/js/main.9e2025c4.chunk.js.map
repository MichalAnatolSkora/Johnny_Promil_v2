{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","react_default","a","createElement","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","id","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","Container","Row","ButtonToolbar","Alert","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVA0DeA,0LAnDX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAErBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxBN,EAAAC,EAAAC,cAACE,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,mBACAR,EAAAC,EAAAC,cAACE,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7BV,EAAAC,EAAAC,cAACE,EAAA,EAAOO,SAAR,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAKT,UAAU,WACbH,EAAAC,EAAAC,cAACU,EAAA,EAAIC,KAAL,CAAUL,KAAK,SAAf,QACAR,EAAAC,EAAAC,cAACU,EAAA,EAAIC,KAAL,CAAUL,KAAK,SAAf,QACAR,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAaC,MAAM,WAAWC,GAAG,sBAC/BhB,EAAAC,EAAAC,cAACY,EAAA,EAAYG,KAAb,CAAkBT,KAAK,eAAvB,UACAR,EAAAC,EAAAC,cAACY,EAAA,EAAYG,KAAb,CAAkBT,KAAK,eAAvB,kBACAR,EAAAC,EAAAC,cAACY,EAAA,EAAYG,KAAb,CAAkBT,KAAK,eAAvB,aACAR,EAAAC,EAAAC,cAACY,EAAA,EAAYI,QAAb,MACAlB,EAAAC,EAAAC,cAACY,EAAA,EAAYG,KAAb,CAAkBT,KAAK,eAAvB,oBAGJR,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,QAAM,GACVpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASpB,UAAU,YACxDH,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,aAMEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KAEE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KAEE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KACE5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,aAAhB,aACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,WACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,UAAhB,UACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,QAAhB,QACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,SAAhB,SACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,QAAhB,QACAzB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAQ,QAAhB,UAGJzB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,IAAI,IAAIL,QAAQ,WAAvB,mBA7CMM,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9e2025c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, ButtonToolbar, Alert, Container, Row, Navbar, Nav, Form, FormControl, NavDropdown } from 'react-bootstrap';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n<Navbar bg=\"light\" expand=\"lg\">\n  <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">Home</Nav.Link>\n      <Nav.Link href=\"#link\">Link</Nav.Link>\n      <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-success\">Search</Button>\n    </Form>\n  </Navbar.Collapse>\n</Navbar>\n\n\n        <Container>\n\n          <Row>\n\n            <ButtonToolbar>\n              <Button variant=\"primary\">Primary</Button>\n              <Button variant=\"secondary\">Secondary</Button>\n              <Button variant=\"success\">Success</Button>\n              <Button variant=\"warning\">Warning</Button>\n              <Button variant=\"danger\">Danger</Button>\n              <Button variant=\"info\">Info</Button>\n              <Button variant=\"light\">Light</Button>\n              <Button variant=\"dark\">Dark</Button>\n              <Button variant=\"link\">Link</Button>\n            </ButtonToolbar>\n          </Row>\n          <Row>\n            <Alert key=\"1\" variant=\"primary\">Alert</Alert>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}